"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[8875],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(t),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return t?n.createElement(m,i(i({ref:r},s),{},{components:t})):n.createElement(m,i({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[d]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4937:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:3},i="Indexer Query Mode",c={unversionedId:"cli-reference/genus-query-mode",id:"cli-reference/genus-query-mode",title:"Indexer Query Mode",description:"",source:"@site/docs/cli-reference/genus-query-mode.md",sourceDirName:"cli-reference",slug:"/cli-reference/genus-query-mode",permalink:"/strata-cli/docs/current/cli-reference/genus-query-mode",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Template Mode",permalink:"/strata-cli/docs/current/cli-reference/contract-mode"},next:{title:"Node Query Mode",permalink:"/strata-cli/docs/current/cli-reference/bifrost-query-mode"}},l={},u=[],s={toc:u},d="wrapper";function p(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"indexer-query-mode"},"Indexer Query Mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Command: indexer-query [utxo-by-address]\nIndexer query mode\nCommand: indexer-query utxo-by-address [options]\nQuery utxo\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Node node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  --from-address <value>   Address where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --token <value>          The token type. The valid token types are 'lvl', 'topl', 'asset', 'group', 'series', and 'all'\n")))}p.isMDXComponent=!0}}]);